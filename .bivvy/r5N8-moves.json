{
  "Climb": "r5N8",
  "moves": [
    {
      "status": "done",
      "description": "Examine current backup config structure and interfaces",
      "details": "Review backup.model.ts, backup-config.service.ts, and GraphQL schema to understand current structure. Document what needs to be changed for the config simplification."
    },
    {
      "status": "done", 
      "description": "Create new backup config interfaces",
      "details": "Define simplified BackupJobConfig interface with only job-level fields (id, name, schedule, enabled, timestamps). Create union types for sourceConfig and destinationConfig. Update backup.model.ts with new interfaces.",
      "rest": true
    },
    {
      "status": "done",
      "description": "Update source processor interfaces for streaming support",
      "details": "Enhance BackupSourceResult interface to include streamCommand, streamArgs, and streaming capability metadata. Update backup-source-processor.interface.ts to support both streaming and non-streaming workflows."
    },
    {
      "status": "done",
      "description": "Update destination processor interfaces",
      "details": "Enhance BackupDestinationConfig interface with useStreaming and supportsStreaming flags. Update backup-destination-processor.interface.ts to handle both streaming and regular backup inputs."
    },
    {
      "status": "done",
      "description": "Add streaming support to Raw Source Processor",
      "details": "Update raw-source-processor.service.ts to generate tar commands for streaming backups. Add include/exclude pattern handling in tar command generation. Add metadata flags for streaming capability. Maintain support for direct file path mode.",
      "rest": true
    },
    {
      "status": "done",
      "description": "Create Backup Orchestration Service",
      "details": "Create new backup-orchestration.service.ts that manages source and destination processor instances. Implement workflow detection logic (streaming vs non-streaming). Handle job execution coordination between processors."
    },
    {
      "status": "todo",
      "description": "Implement streaming workflow execution in orchestration service",
      "details": "Add executeStreamingBackup method that coordinates source streaming commands with destination streaming uploads. Handle progress reporting, error handling, and cleanup coordination for streaming workflows."
    },
    {
      "status": "todo",
      "description": "Implement regular workflow execution in orchestration service", 
      "details": "Add executeRegularBackup method for non-streaming workflows. Handle file-based transfers from source output to destination. Implement consistent error handling and cleanup."
    },
    {
      "status": "todo",
      "description": "Update backup-config.service.ts to use new config structure",
      "details": "Refactor createBackupJobConfig and updateBackupJobConfig methods to work with simplified config structure. Remove handling of source/destination specific fields from main config. Update validation logic.",
      "rest": true
    },
    {
      "status": "todo",
      "description": "Integrate orchestration service into backup-config.service.ts",
      "details": "Replace direct rclone service calls in executeBackupJob with orchestration service. Update job execution to use processor pattern. Maintain existing cron scheduling and job tracking functionality."
    },
    {
      "status": "todo",
      "description": "Update GraphQL schema for new config structure",
      "details": "Update backup GraphQL types to reflect simplified BackupJobConfig structure. Create separate input types for different source and destination configs. Update mutations and queries to handle new structure."
    },
    {
      "status": "todo",
      "description": "Update backup JSON forms configuration",
      "details": "Refactor backup-jsonforms-config.ts to remove destination-specific fields (remoteName, destinationPath, rcloneOptions) from basic config. Create separate destination config section. Reorganize form steps to separate job config, source config, and destination config clearly.",
      "rest": true
    },
    {
      "status": "todo",
      "description": "Create source config factory/registry",
      "details": "Create a service to manage source processor instances by type. Implement getSourceProcessor method that returns appropriate processor based on sourceType. Handle processor dependency injection and lifecycle."
    },
    {
      "status": "todo",
      "description": "Create destination config factory/registry", 
      "details": "Create a service to manage destination processor instances by type. Implement getDestinationProcessor method that returns appropriate processor based on destinationType. Handle processor dependency injection and lifecycle."
    },
    {
      "status": "todo",
      "description": "Add comprehensive error handling and cleanup coordination",
      "details": "Implement consistent error propagation between source and destination processors. Add cleanup coordination when either source or destination fails. Handle timeout scenarios for both streaming and non-streaming operations.",
      "rest": true
    },
    {
      "status": "todo",
      "description": "Add progress reporting interface",
      "details": "Create unified progress reporting interface that works for both streaming and non-streaming workflows. Implement real-time status updates. Ensure metadata preservation throughout the pipeline."
    },
    {
      "status": "todo",
      "description": "Write unit tests for Raw Source Processor streaming",
      "details": "Test streaming command generation with various include/exclude patterns. Test metadata flags and streaming capability detection. Test error handling and cleanup scenarios. Mock dependencies appropriately."
    },
    {
      "status": "todo",
      "description": "Write unit tests for Backup Orchestration Service",
      "details": "Test workflow detection logic (streaming vs non-streaming). Test source and destination processor coordination. Test error handling and cleanup coordination. Mock all processor dependencies."
    },
    {
      "status": "todo",
      "description": "Write unit tests for updated backup-config.service.ts",
      "details": "Test config creation and updates with new structure. Test validation of source and destination configs. Test job execution with orchestration service. Test cron scheduling functionality."
    },
    {
      "status": "todo",
      "description": "Write integration tests for complete backup workflows",
      "details": "Test Flash source with RClone destination (streaming). Test Raw source with RClone destination (both streaming and non-streaming). Test job management and status tracking. Test cleanup coordination.",
      "rest": true
    },
    {
      "status": "todo",
      "description": "Test edge cases and error scenarios",
      "details": "Test network failures during streaming uploads. Test source preparation failures with cleanup requirements. Test invalid config combinations. Test large file handling and timeout scenarios."
    },
    {
      "status": "todo",
      "description": "Update existing backup configs to new structure",
      "details": "Create migration logic to convert any existing backup configs to new simplified structure. Move source-specific and destination-specific fields to appropriate sub-configs. Test migration with existing data."
    },
    {
      "status": "todo",
      "description": "Performance testing and optimization",
      "details": "Test streaming vs non-streaming performance with large datasets. Verify memory usage improvements for streaming backups. Test timeout handling and resource cleanup. Benchmark execution times for different backup types."
    },
    {
      "status": "todo",
      "description": "Documentation and final validation",
      "details": "Document new config structure and processor architecture. Create examples for different backup configurations. Validate all backup types work correctly. Ensure clean separation of concerns achieved.",
      "rest": true
    }
  ]
} 