enum NotificationType {
    UNREAD
    ARCHIVE
}

input NotificationFilter {
    importance: Importance
    type: NotificationType
    offset: Int!
    limit: Int!
}

type Query {
    notifications: Notifications!
}

type Mutation {
    createNotification(input: NotificationData!): Notification!
    deleteNotification(id: String!, type: NotificationType!): NotificationOverview!
    """Marks a notification as archived."""
    archiveNotification(id: String!): NotificationOverview!
    """Marks a notification as unread."""
    unreadNotification(id: String!): NotificationOverview!
}

type Subscription {
    notificationAdded: Notification!
    notificationsOverview: NotificationOverview!
}

enum Importance {
    ALERT
    INFO
    WARNING
}

type Notifications implements Node {
    id: ID!
    overview: NotificationOverview!
    data(filter: NotificationFilter!): [Notification!]!
}

type Notification implements Node {
    id: ID!
    """
    Also known as 'event'
    """
    title: String!
    subject: String!
    description: String!
    importance: Importance!
    link: String
    type: NotificationType!
    """
    ISO Timestamp for when the notification occurred
    """
    timestamp: String
}

input NotificationData {
    title: String!
    subject: String!
    description: String!
    importance: Importance!
    link: String
}

type NotificationOverview {
    unread: NotificationCounts!
    archive: NotificationCounts!
}

type NotificationCounts {
    info: Int!
    warning: Int!
    alert: Int!
    total: Int!
}
