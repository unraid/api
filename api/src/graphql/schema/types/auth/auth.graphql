"""
Available actions for permissions
"""
enum Action {
    CREATE
    READ
    UPDATE
    DELETE
}

"""
Available resources for permissions
"""
enum Resource {
    API_KEY
    CLOUD
    CONFIG
    CRASH_REPORTING_ENABLED
    CUSTOMIZATIONS
    DISK
    DISPLAY
    FLASH
    INFO
    LOGS
    OS
    OWNER
    PERMISSION
    REGISTRATION
    SERVERS
    VARS
    CONNECT
    NOTIFICATIONS
    ARRAY
    DASHBOARD
    DOCKER
    NETWORK
    SERVICES
    VMS
    ME
    WELCOME
}

"""
Available roles for API keys and users
"""
enum Role {
    ADMIN
    UPC
    MY_SERVERS
    NOTIFIER
    GUEST
}

"""
Available possession types for permissions
"""
enum Possession {
    ANY
    OWN
}

type ApiKey {
    id: String!
    name: String!
    description: String
    roles: [Role!]!
    createdAt: DateTime!
    lastUsed: DateTime
}

type ApiKeyWithSecret {
    id: String!
    key: String!
    name: String!
    description: String
    roles: [Role!]!
    createdAt: DateTime!
    lastUsed: DateTime
}

input CreateApiKeyInput {
    name: String!
    description: String
    roles: [Role!]!
}

input AddPermissionInput {
    role: Role!
    resource: Resource!
    action: Action!
    possession: Possession = ANY
}

input AddRoleForUserInput {
    userId: String!
    role: Role!
}

input AddRoleForApiKeyInput {
    apiKeyId: String!
    role: Role!
}

input RemoveRoleFromApiKeyInput {
    apiKeyId: String!
    role: Role!
}

type Mutation {
    createApiKey(input: CreateApiKeyInput!): ApiKeyWithSecret!
    addPermission(input: AddPermissionInput!): Boolean!
    addRoleForUser(input: AddRoleForUserInput!): Boolean!
    addRoleForApiKey(input: AddRoleForApiKeyInput!): Boolean!
    removeRoleFromApiKey(input: RemoveRoleFromApiKeyInput!): Boolean!
}

type Query {
    apiKeys: [ApiKey!]!
    apiKey(id: ID!): ApiKey
}
