import { Field, GraphQLISODateTime, ID, InputType, ObjectType, registerEnumType } from '@nestjs/graphql';

import { IsBoolean, IsOptional, IsString, IsUrl } from 'class-validator';

export enum PluginInstallStatus {
    QUEUED = 'QUEUED',
    RUNNING = 'RUNNING',
    SUCCEEDED = 'SUCCEEDED',
    FAILED = 'FAILED',
}

registerEnumType(PluginInstallStatus, {
    name: 'PluginInstallStatus',
    description: 'Status of a plugin installation operation',
});

@InputType({
    description: 'Input payload for installing a plugin',
})
export class InstallPluginInput {
    @Field(() => String, {
        description: 'Plugin installation URL (.plg)',
    })
    @IsUrl({
        protocols: ['http', 'https'],
        require_protocol: true,
    })
    url!: string;

    @Field(() => String, {
        nullable: true,
        description: 'Optional human-readable plugin name used for logging',
    })
    @IsOptional()
    @IsString()
    name?: string | null;

    @Field(() => Boolean, {
        nullable: true,
        description:
            'Force installation even when plugin is already present. Defaults to true to mirror the existing UI behaviour.',
    })
    @IsOptional()
    @IsBoolean()
    forced?: boolean | null;
}

@ObjectType({
    description: 'Represents a tracked plugin installation operation',
})
export class PluginInstallOperation {
    @Field(() => ID, {
        description: 'Unique identifier of the operation',
    })
    id!: string;

    @Field(() => String, {
        description: 'Plugin URL passed to the installer',
    })
    url!: string;

    @Field(() => String, {
        nullable: true,
        description: 'Optional plugin name for display purposes',
    })
    name?: string | null;

    @Field(() => PluginInstallStatus, {
        description: 'Current status of the operation',
    })
    status!: PluginInstallStatus;

    @Field(() => GraphQLISODateTime, {
        description: 'Timestamp when the operation was created',
    })
    createdAt!: Date;

    @Field(() => GraphQLISODateTime, {
        nullable: true,
        description: 'Timestamp for the last update to this operation',
    })
    updatedAt?: Date | null;

    @Field(() => GraphQLISODateTime, {
        nullable: true,
        description: 'Timestamp when the operation finished, if applicable',
    })
    finishedAt?: Date | null;

    @Field(() => [String], {
        description: 'Collected output lines generated by the installer (capped at recent lines)',
    })
    output!: string[];
}

@ObjectType({
    description: 'Emitted event representing progress for a plugin installation',
})
export class PluginInstallEvent {
    @Field(() => ID, { description: 'Identifier of the related plugin installation operation' })
    operationId!: string;

    @Field(() => PluginInstallStatus, { description: 'Status reported with this event' })
    status!: PluginInstallStatus;

    @Field(() => [String], {
        nullable: true,
        description: 'Output lines newly emitted since the previous event',
    })
    output?: string[] | null;

    @Field(() => GraphQLISODateTime, { description: 'Timestamp when the event was emitted' })
    timestamp!: Date;
}
