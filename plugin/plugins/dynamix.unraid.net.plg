<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name                   "dynamix.unraid.net">
<!ENTITY launch                 "MyServers">
<!ENTITY author                 "limetech">
<!ENTITY env                    "production">
<!ENTITY version                "2022.07.26.1609">
<!ENTITY pluginURL              "https://unraid-dl.sfo2.cdn.digitaloceanspaces.com/unraid-api/&name;.plg">
<!ENTITY source                 "/boot/config/plugins/dynamix.my.servers/&name;">
<!ENTITY MD5                    "f5085efe663a2f055ec5d27d5b80c9ac">
<!ENTITY SHA256                 "1cbe4a31cb9fe40e83316b09c75653461d83243ca0b04628562f7ecf55b4266d">
<!ENTITY API_version            "2.50.0">
<!ENTITY API_MD5                "ffee242081d5585e30eeb66ec880a54d">
<!ENTITY API_SHA256             "d4c67669f05c49fc130513af0c29c9b26cb4362a1b9f491bc39b8d9e3131e8f1">
<!ENTITY downloadserver         "https://unraid-dl.sfo2.cdn.digitaloceanspaces.com">
<!ENTITY JSDLsserver            "https://registration.unraid.net">
]>

<PLUGIN name="&name;" author="&author;" version="&version;" pluginURL="&pluginURL;" launch="&launch;" min="6.9.0-rc1" icon="globe">

<CHANGES>
##a long time ago in a galaxy far far away
- initial release
</CHANGES>

<!-- prevent prod plugin from installing when staging already installed, and vice versa -->
<FILE Run="/bin/bash" Method="install">
<INLINE>
name="&name;"
version="&version;"
API_version="&API_version;"
PLGTYPE="&env;"
<![CDATA[
echo "Installing ${name}.plg ${version} with Unraid API ${API_version}"
if [ "${PLGTYPE}" = "production" ] && [ -f /boot/config/plugins/dynamix.unraid.net.staging.plg ]; then
  echo "‚ö†Ô∏è Please uninstall the My Servers staging plugin before installing the production version"
  exit 1
fi
if [ "${PLGTYPE}" = "staging" ] && [ -f /boot/config/plugins/dynamix.unraid.net.plg ]; then
  echo "‚ö†Ô∏è Please uninstall the My Servers production plugin before installing the staging version"
  exit 1
fi
exit 0
]]>
</INLINE>
</FILE>

<!-- gzip check, DNS check, then download and validate files before doing anything destructive -->
<FILE Run="/bin/bash" Method="install">
<INLINE>
DLHOST=$(echo "&downloadserver;" | awk -F/ '{print $3}')
JSHOST=$(echo "&JSDLsserver;" | awk -F/ '{print $3}')
<![CDATA[
version=
# shellcheck disable=SC1091
source /etc/unraid-version

# ensure gzip is available and executes, is needed by '/etc/rc.d/rc.unraid-api install'
if [ ! -x /bin/gzip ] || ! /bin/gzip -V &>/dev/null; then
  echo "‚ö†Ô∏è Unable to install as gzip is not available on this system. For help, post your diagnostics.zip to a new support thread in the forum."
  exit 1
fi

dnscheck() {
  HOST=$1
  if [ -x /usr/bin/host ] && ! /usr/bin/host "${HOST}" &>/dev/null; then
    echo "‚ö†Ô∏è Warning: Your DNS server (${DNS_SERVER1}) is unable to resolve '${HOST}'"
    DNSERR=yes
  fi
}

# shellcheck disable=SC1090
source <(grep "DNS_SERVER1" /usr/local/emhttp/state/network.ini 2>/dev/null)
DNSERR=no

echo "Checking DNS..."
dnscheck "${DLHOST}"
dnscheck "${JSHOST}"
dnscheck "mothership.unraid.net"
dnscheck "wanip4.unraid.net"
dnscheck "backup.unraid.net"

[[ "${DNSERR}" == "yes" && "${DNS_SERVER1}" != "8.8.8.8" ]] && echo "  Recommend navigating to Settings -> Network Settings and changing your DNS server to 8.8.8.8"
# Note: DNS checks will fail if the network is not available at boot. Cannot exit the install when DNS checks fail.

if [[ "${version:0:3}" == "6.9" || "${version:0:4}" == "6.10" ]]; then
  echo
  echo "‚ö†Ô∏è Do not close this window yet"
  echo
fi

# compare expected SHA256 to actual SHA256, if not equal delete file
# this is needed prior to Unraid 6.11.0
sha256check() {
  FILE=$1
  EXPECTED=$2
  if [[ -f "${FILE}" ]]; then
    echo -n "Validating ${FILE}... "
    ACTUAL=$(sha256sum "${FILE}" 2>/dev/null | grep -Po '^\S+')
    if [[ "$EXPECTED" != "$ACTUAL" ]]; then
      rm "${FILE}"
      echo " old. Deleted file."
    else
      echo " ok."
    fi
  fi
}
]]>
sha256check "&source;.txz" "&SHA256;"
sha256check "/boot/config/plugins/dynamix.my.servers/unraid-api.tgz" "&API_SHA256;"
<![CDATA[
# always re-download latest unraid.min.js
rm -f /tmp/unraid.min.js.tmp1

if [[ "${version:0:3}" == "6.9" || "${version:0:4}" == "6.10" ]]; then
  echo
  echo "‚ö†Ô∏è Do not close this window yet"
  echo
fi
exit 0
]]>
</INLINE>
</FILE>

<!-- download main txz -->
<FILE Name="&source;.txz">
<URL>&downloadserver;/unraid-api/&name;-&version;.txz</URL>
<MD5>&MD5;</MD5>
<SHA256>&SHA256;</SHA256>
</FILE>

<!-- download unraid-api -->
<FILE Name="/boot/config/plugins/dynamix.my.servers/unraid-api.tgz">
<URL>&downloadserver;/unraid-api/unraid-api-&API_version;.tgz</URL>
<MD5>&API_MD5;</MD5>
<SHA256>&API_SHA256;</SHA256>
</FILE>

<!-- download unraid.min.js, no MD5 or SHA256 for comparison, need to validate later -->
<FILE Name="/tmp/unraid.min.js.tmp1">
<URL>&JSDLsserver;/webComps/unraid.min.js</URL>
</FILE>

<FILE Run="/bin/bash" Method="install">
<INLINE>
MAINTXZ="&source;.txz"
<![CDATA[
# before proceeding with install, doubly confirm downloaded files exist. just being pedantic.
FILE=${MAINTXZ} && [[ ! -f "$FILE" ]] && echo "‚ö†Ô∏è file missing - $FILE" && exit 1
FILE=/boot/config/plugins/dynamix.my.servers/unraid-api.tgz && [[ ! -f "$FILE" ]] && echo "‚ö†Ô∏è file missing - $FILE" && exit 1

# before uninstalling anything, verify unraid.min.js was downloaded and looks valid, or that we already have an existing copy
JS_FLASH_DEST=/boot/config/plugins/dynamix.my.servers/webComps/
JS_FINAL_DEST=/usr/local/emhttp/plugins/dynamix.my.servers/webComps/
JS_FILE=unraid.min.js

# file was downloaded as /tmp/unraid.min.js.tmp1
rm -f /tmp/${JS_FILE}.tmp2
if [[ -f "/tmp/${JS_FILE}.tmp1" && -s "/tmp/${JS_FILE}.tmp1" ]]; then
  # simple validatation that the file was downloaded correctly
  if grep -q "sourceMappingURL=unraid.min.js.map" "/tmp/${JS_FILE}.tmp1"; then
    # remove source mapping from js
    head -n -1 "/tmp/${JS_FILE}.tmp1" >"/tmp/${JS_FILE}.tmp2"
    rm "/tmp/${JS_FILE}.tmp1"
  fi
fi
if [[ ! -f "/tmp/${JS_FILE}.tmp2" && ! -f "${JS_FLASH_DEST}${JS_FILE}" && ! -f "${JS_FINAL_DEST}${JS_FILE}" ]]; then
  # unraid.min.js could not be downloaded, and it does not already exist in JS_FLASH_DEST or JS_FINAL_DEST, we have to bail
  echo "‚ö†Ô∏è file missing - unraid.min.js" && exit 1
fi
# at this point, /tmp/unraid.min.js.tmp2 is ready to be moved elsewhere as unraid.min.js
# OR there is an existing copy of unraid.min.js in JS_FLASH_DEST or JS_FINAL_DEST
exit 0
]]>
</INLINE>
</FILE>

<FILE Run="/bin/bash" Method="remove">
<INLINE>
<![CDATA[
version=
# shellcheck disable=SC1091
source /etc/unraid-version
if [[ "${version:0:3}" == "6.9" || "${version:0:4}" == "6.10" ]]; then
  echo
  echo "‚ö†Ô∏è Do not close this window yet"
  echo
fi
exit 0
]]>
</INLINE>
</FILE>

<!-- disable features on uninstall -->
<!-- NOTE: this script is PHP not bash -->
<FILE Run="/usr/bin/php --" Method="remove">
<INLINE>
<![CDATA[
<?
$msini = @parse_ini_file('/boot/config/plugins/dynamix.my.servers/myservers.cfg', true);

# for convenience, scan myservers.cfg for deleteOnUninstall="no" and if that exists, 
# then skip the rest of the cleanup.
$deleteOnUninstall = ($msini === false || empty($msini['plugin']['deleteOnUninstall']) || $msini['plugin']['deleteOnUninstall'] == 'yes');

if (!$deleteOnUninstall) {
  exit(0);
}

echo "\n";
echo "**********************************\n";
echo "üßπ CLEANING UP - may take a minute\n";
echo "**********************************\n";

if (file_exists("/boot/.git")) {
  # stop flash backup service
  echo "\nStopping flash backup service. Please wait‚Ä¶";
  exec("/etc/rc.d/rc.flash_backup stop &>/dev/null");

  # deactivate flash backup
  echo "\nDeactivating flash backup. Please wait‚Ä¶";
  passthru("/usr/bin/php /usr/local/emhttp/plugins/dynamix.my.servers/include/UpdateFlashBackup.php deactivate");

  # delete local flash backup
  echo "\nDeleting local flash backup. Please wait‚Ä¶\n";
  exec("rm -rf /boot/.git");
}

# set "Allow Remote Access" to "No" and sign out from My Servers
if ($msini !== false) {
  # stop unraid-api
  echo "\nStopping unraid-api. Please wait‚Ä¶";
  exec("/etc/rc.d/rc.unraid-api stop &>/dev/null");

  if (!empty($msini['remote']['username'])) {
    $var = parse_ini_file("/var/local/emhttp/var.ini");
    $keyfile = @file_get_contents($var['regFILE']);
    if ($keyfile !== false) {
      echo "\nSigning out of My Servers\n";
      $ch = curl_init('https://keys.lime-technology.com/account/server/unregister');
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($ch, CURLOPT_POST, 1);
      curl_setopt($ch, CURLOPT_POSTFIELDS, ['keyfile' => @base64_encode($keyfile)]);
      curl_exec($ch);
      curl_close($ch);
    }
  }

  # remove myservers.cfg
  unlink('/boot/config/plugins/dynamix.my.servers/myservers.cfg');

  # reload nginx
  echo "\nReloading Web Server\n";
  exec("/etc/rc.d/rc.nginx reload &>/dev/null");
}
exit(0);
]]>
</INLINE>
</FILE>

<!-- uninstall existing plugin during update or removal -->
<FILE Run="/bin/bash" Method="install remove">
<INLINE>
MAINNAME="&name;"
<![CDATA[
version=
# shellcheck disable=SC1091
source /etc/unraid-version
if [[ "${version:0:3}" == "6.9" || "${version:0:4}" == "6.10" ]]; then
  echo
  echo "‚ö†Ô∏è Do not close this window yet"
  echo
fi
if [ -e /etc/rc.d/rc.unraid-api ]; then
  # Stop all services
  /etc/rc.d/rc.flash_backup stop &>/dev/null
  /etc/rc.d/rc.unraid-api uninstall
  # Uninstall the main source package
  [[ -f "/var/log/packages/${MAINNAME}" ]] && removepkg --terse "${MAINNAME}"
  # restore stock files
  FILE=/usr/local/emhttp/plugins/dynamix/include/UpdateDNS.php && [[ -f "$FILE-" ]] && mv -f "$FILE-" "$FILE"
  FILE=/usr/local/emhttp/plugins/dynamix/Registration.page && [[ -f "$FILE-" ]] && mv -f "$FILE-" "$FILE"
  FILE=/usr/local/emhttp/plugins/dynamix/include/DefaultPageLayout.php && [[ -f "$FILE-" ]] && mv -f "$FILE-" "$FILE"
  FILE=/usr/local/emhttp/plugins/dynamix/DisplaySettings.page && [[ -f "$FILE-" ]] && mv -f "$FILE-" "$FILE"
  FILE=/usr/local/emhttp/plugins/dynamix.my.servers/MyServers.page && [[ -f "$FILE-" ]] && mv -f "$FILE-" "$FILE"
  FILE=/usr/local/emhttp/plugins/dynamix.my.servers/Registration.page && [[ -f "$FILE-" ]] && mv -f "$FILE-" "$FILE"
  FILE=/usr/local/emhttp/plugins/dynamix.my.servers/include/myservers1.php && [[ -f "$FILE-" ]] && mv -f "$FILE-" "$FILE"
  FILE=/usr/local/emhttp/plugins/dynamix.my.servers/include/myservers2.php && [[ -f "$FILE-" ]] && mv -f "$FILE-" "$FILE"
  FILE=/usr/local/emhttp/plugins/dynamix.my.servers/include/state.php && [[ -f "$FILE-" ]] && mv -f "$FILE-" "$FILE"
  FILE=/sbin/upgradepkg && [[ -f "$FILE-" ]] && mv -f "$FILE-" "$FILE"
  # delete plugin files from flash drive and OS
  rm -f /boot/config/plugins/dynamix.my.servers/.gitignore
  rm -f /etc/rc.d/rc.unraid-api
  rm -f /etc/rc.d/rc.flash_backup
  rm -f /usr/local/sbin/unraid-api
  rm -rf /usr/local/emhttp/plugins/dynamix.unraid.net
  rm -rf /usr/local/emhttp/plugins/dynamix.unraid.net.staging
  rm -f /etc/rc.d/rc6.d/K10_flash_backup
  # delete any legacy files that may exist
  rm -rf /boot/config/plugins/dynamix.my.servers/libvirt.node
  rm -rf /boot/config/plugins/dynamix.my.servers/segfault-handler.node
  rm -rf /boot/config/plugins/dynamix.my.servers/wc
  rm -f /boot/config/plugins/Unraid.net/unraid-api.tgz
  rm -f /boot/config/plugins/Unraid.net/.gitignore
  rm -rf /boot/config/plugins/Unraid.net/webComps
  rm -rf /boot/config/plugins/Unraid.net/wc
  rm -f /usr/local/emhttp/webGui/javascript/vue.js
  rm -f /usr/local/emhttp/webGui/javascript/vue.min.js
  rm -rf /usr/local/emhttp/webGui/webComps
  rm -rf /usr/local/emhttp/webGui/wc
  # clean up our optional makestate modifications in rc.nginx (on 6.9 and 6.10.0-rc[12])
  sed -i '/scripts\/makestate/d' /etc/rc.d/rc.nginx
fi
exit 0
]]>
</INLINE>
</FILE>

<!-- install all the things -->
<FILE Run="/bin/bash" Method="install">
<INLINE>
PLGTYPE="&env;"
MAINTXZ="&source;.txz"
<![CDATA[
version=
# shellcheck disable=SC1091
source /etc/unraid-version
if [[ "${version:0:3}" == "6.9" || "${version:0:4}" == "6.10" ]]; then
  echo
  echo "‚ö†Ô∏è Do not close this window yet"
  echo
fi

# NOTE: any 'exit 1' after this point will result in a broken install

# Preserve in case plugin is removed
FILE=/usr/local/emhttp/plugins/dynamix/include/UpdateDNS.php && [[ -f "$FILE" ]] && mv -f "$FILE" "$FILE-"
FILE=/usr/local/emhttp/plugins/dynamix/Registration.page && [[ -f "$FILE" ]] && mv -f "$FILE" "$FILE-"
FILE=/usr/local/emhttp/plugins/dynamix.my.servers/MyServers.page && [[ -f "$FILE" ]] && mv -f "$FILE" "$FILE-"
FILE=/usr/local/emhttp/plugins/dynamix.my.servers/Registration.page && [[ -f "$FILE" ]] && mv -f "$FILE" "$FILE-"
FILE=/usr/local/emhttp/plugins/dynamix.my.servers/include/myservers1.php && [[ -f "$FILE" ]] && mv -f "$FILE" "$FILE-"
FILE=/usr/local/emhttp/plugins/dynamix.my.servers/include/myservers2.php && [[ -f "$FILE" ]] && mv -f "$FILE" "$FILE-"
FILE=/usr/local/emhttp/plugins/dynamix.my.servers/include/state.php && [[ -f "$FILE" ]] && mv -f "$FILE" "$FILE-"
FILE=/sbin/upgradepkg && [[ -f "$FILE" ]] && cp -f "$FILE" "$FILE-"

# move settings on flash drive
CFG_OLD=/boot/config/plugins/Unraid.net
CFG_NEW=/boot/config/plugins/dynamix.my.servers
[[ -d "$CFG_OLD" ]] && [[ ! -d "$CFG_NEW" ]] && mv "$CFG_OLD" "$CFG_NEW"

# install the main txz
upgradepkg --install-new --reinstall "${MAINTXZ}"

# confirm an expected file now exists
# WARNING: failure here results in broken install
[[ ! -f /usr/local/emhttp/plugins/dynamix.my.servers/scripts/cfgMigration ]] && echo "‚ö†Ô∏è files missing from main txz" && exit 1

if [[ "${version:0:3}" == "6.9" || "${version:0:4}" == "6.10" ]]; then
  echo
  echo "‚ö†Ô∏è Do not close this window yet"
  echo
fi

# setup env
if [ "${PLGTYPE}" = "production" ] || [ ! -f /boot/config/plugins/dynamix.my.servers/env ]; then
  echo "env=\"${PLGTYPE}\"" >/boot/config/plugins/dynamix.my.servers/env
fi

# process unraid.min.js
echo
echo "üïπÔ∏è Installing JavaScript web components"
JS_FLASH_DEST=/boot/config/plugins/dynamix.my.servers/webComps/
JS_FINAL_DEST=/usr/local/emhttp/plugins/dynamix.my.servers/webComps/
JS_FILE=unraid.min.js

# if /tmp/${JS_FILE}.tmp2 was downloaded above, move it to JS_FLASH_DEST
[[ -f "/tmp/${JS_FILE}.tmp2" ]] && mkdir -p "${JS_FLASH_DEST}" && mv "/tmp/${JS_FILE}.tmp2" "${JS_FLASH_DEST}${JS_FILE}"

# NOTE: if download was not successful, there may still be a previous copy in JS_FLASH_DEST
# if unraid.min.js exists in JS_FLASH_DEST, copy it from JS_FLASH_DEST to JS_FINAL_DEST
# @TODO: validate that the unraid.min.js in JS_FLASH_DEST is not older than an existing one in JS_FINAL_DEST
[[ -f "${JS_FLASH_DEST}${JS_FILE}" ]] && mkdir -p "${JS_FINAL_DEST}" && cp "${JS_FLASH_DEST}${JS_FILE}" "${JS_FINAL_DEST}"

# NOTE: if file does not exist in JS_FLASH_DEST, there may still be a previous copy in JS_FINAL_DEST
# WARNING: failure here results in broken install. this should never happen as previous tests confirmed unraid.min.js does exist
[[ ! -f "${JS_FINAL_DEST}${JS_FILE}" ]] && echo "‚ö†Ô∏è Install failed - ${JS_FILE} missing" && exit 1
echo "‚úÖ Finished installing web components"

if [[ "${version:0:3}" == "6.9" || "${version:0:4}" == "6.10" ]]; then
  echo
  echo "‚ö†Ô∏è Do not close this window yet"
  echo
fi

# Extra steps for Unraid 6.9.x, skip in 6.10.x
if [[ "${version:0:3}" == "6.9" ]]; then
  # Update DefaultPageLayout.php, preserve in case plugin is removed
  FILE=/usr/local/emhttp/plugins/dynamix/include/DefaultPageLayout.php
  cp -f "$FILE" "$FILE-"
  sed -i 's/<\/head>/<? include "\/usr\/local\/emhttp\/plugins\/dynamix.my.servers\/include\/myservers1.php" ?>\n<\/head>/' "$FILE"
  sed -i 's/<div class="block">/<? include "\/usr\/local\/emhttp\/plugins\/dynamix.my.servers\/include\/myservers2.php" ?>\n<div class="block">/' "$FILE"
  sed -i '/<div class="block">/,/<\/div>/d' "$FILE"

  # Update DisplaySettings.php, preserve in case plugin is removed
  FILE=/usr/local/emhttp/plugins/dynamix/DisplaySettings.page
  cp -f "$FILE" "$FILE-"
  echo -e "\n\n" >>/usr/local/emhttp/plugins/dynamix/DisplaySettings.page-splice1
  echo -e "\n\n" >>/usr/local/emhttp/plugins/dynamix/DisplaySettings.page-splice2
  sed -i $'/_(Header custom text color)_/{e cat /usr/local/emhttp/plugins/dynamix/DisplaySettings.page-splice1\n}' "$FILE"
  sed -i $'/_(Custom banner)_/{e cat /usr/local/emhttp/plugins/dynamix/DisplaySettings.page-splice2\n}' "$FILE"
fi
# delete this file regardless of Unraid version
rm /usr/local/emhttp/plugins/dynamix/DisplaySettings.page-splice1
rm /usr/local/emhttp/plugins/dynamix/DisplaySettings.page-splice2

# run dynamix.cfg to myservers.cfg migration
CFG_MIG=/usr/local/emhttp/plugins/dynamix.my.servers/scripts/cfgMigration
php $CFG_MIG

# Use myservers.cfg values to help prevent conflicts when installing
CFG=/boot/config/plugins/dynamix.my.servers/myservers.cfg
# shellcheck disable=SC1090
source <(grep 'email\|apikey="unraid_' "${CFG}" 2>/dev/null)
CFG_CLEANED=0
# If user is signed in but has no apikey, or if the apikey is not 64 chars, wipe the [remote] section from the cfg
if ([[ -n "${email}" && (-z "${apikey}" || "${#apikey}" -ne "64") ]]); then
  # remove only the [remote] section
  awk '{
  if($0 ~ /\[remote\]/){output="off"; next}
  if($0 ~ /\[/){output="on"; print; next}
  if(output == "on"){print}
  }' "${CFG}" >"${CFG}-new" && mv "${CFG}-new" "${CFG}"
  CFG_CLEANED=1
  echo "‚ö†Ô∏è Automatically signed out of Unraid.net"
fi
# if there wasn't an email or the CFG was cleaned
if [[ -z "${email}" ]] || [[ CFG_CLEANED -eq 1 ]]; then
  echo "‚ú® Sign In to Unraid.net to get connected to My Servers ‚ú®"
fi

# make the unraid-api work globally for easy cli access
ln -s /usr/local/bin/unraid-api/unraid-api /usr/local/sbin/unraid-api

# configure flash backup to stop when the system starts shutting down
[[ ! -d /etc/rc.d/rc6.d ]] && mkdir /etc/rc.d/rc6.d
[[ ! -h /etc/rc.d/rc0.d ]] && ln -s /etc/rc.d/rc6.d /etc/rc.d/rc0.d
[[ ! -h /etc/rc.d/rc6.d/K10_flash_backup  ]] && ln -s /etc/rc.d/rc.flash_backup /etc/rc.d/rc6.d/K10_flash_backup

if [ -f /var/local/emhttp/var.ini ]; then
  echo "/etc/rc.d/rc.unraid-api install; /etc/rc.d/rc.flash_backup start" | at -M now &>/dev/null
elif grep -q 6.9.0-beta35 /etc/unraid-version; then
  echo "/etc/rc.d/rc.unraid-api install; /etc/rc.d/rc.flash_backup start" | at -M now + 1 minute &>/dev/null
fi

# modify older rc.nginx versions to run this makestate when it builds the nginx config files
if ! grep -q 'scripts/makestate\|/var/local/nginx/state.ini\|/var/local/emhttp/nginx.ini' /etc/rc.d/rc.nginx; then
  placeafter="define_servers"
  if grep -q 'define_locations' /etc/rc.d/rc.nginx; then
    placeafter="define_locations"
  fi

  # splice makestate command in rc.nginx
  CMD_MAKESTATE="inotifywait --timeout 10 -qq -e moved_to /var/local/emhttp/var.ini; /usr/bin/php -f /usr/local/emhttp/plugins/dynamix.my.servers/scripts/makestate &>/dev/null"
  sed -i "/^  ${placeafter}/a  echo '${CMD_MAKESTATE}' | at -M now &>/dev/null" /etc/rc.d/rc.nginx

  # run makestate now to go ahead and generate /var/local/emhttp/nginx.ini
  /usr/bin/php -f /usr/local/emhttp/plugins/dynamix.my.servers/scripts/makestate &>/dev/null
fi
if [[ "${version:0:3}" == "6.9" || "${version:0:4}" == "6.10" ]]; then
  echo
  echo "‚úÖ Installation is complete, it is safe to close this window"
  echo
else
  echo
  echo "‚úÖ Installation is complete"
  echo
fi
exit 0
]]>
</INLINE>
</FILE>

<FILE Run="/bin/bash" Method="remove">
<INLINE>
<![CDATA[
version=
# shellcheck disable=SC1091
source /etc/unraid-version
if [[ "${version:0:3}" == "6.9" || "${version:0:4}" == "6.10" ]]; then
  echo
  echo "‚úÖ Uninstall is complete, it is safe to close this window"
  echo
else
  echo
  echo "‚úÖ Uninstall is complete"
  echo
fi
exit 0
]]>
</INLINE>
</FILE>

</PLUGIN>
