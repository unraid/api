#!/bin/bash
# unraid-api-handler

# shellcheck source=/dev/null
source /etc/profile

flash="/boot/config/plugins/dynamix.my.servers"
[[ ! -d "${flash}" ]] && echo "Please reinstall the Unraid Connect plugin" && exit 1
[[ ! -f "${flash}/env" ]] && echo 'env=production' >"${flash}/env"
unraid_binary_path="/usr/local/bin/unraid-api"
dependencies_dir="/usr/local/unraid-api/node_modules"
api_base_dir="/usr/local/unraid-api"

# Get API version - try different methods in order of preference
api_version=""

# Method 1: Try to get version from package.json if it exists
if [ -f "${api_base_dir}/package.json" ]; then
  api_version=$(grep -o '"version": *"[^"]*"' "${api_base_dir}/package.json" | cut -d'"' -f4)
fi

# Method 2: If not available, try to extract from Slackware package name
if [ -z "$api_version" ]; then
  # Look for dynamix.unraid.net package in /var/log/packages
  pkg_file=$(ls -1 /var/log/packages/dynamix.unraid.net-* 2>/dev/null | head -1)
  if [ -n "$pkg_file" ]; then
    # Extract version from filename (format: name-version-arch-build)
    pkg_basename=$(basename "$pkg_file")
    api_version=$(echo "$pkg_basename" | cut -d'-' -f2)
  fi
fi

# Method 3: Fall back to searching for any existing versioned bundle
if [ -z "$api_version" ]; then
  # Find any node_modules-for-v*.tar.xz file
  versioned_bundle=$(ls -1 "${flash}"/node_modules-for-v*.tar.xz 2>/dev/null | head -1)
  if [ -n "$versioned_bundle" ]; then
    # Extract version from filename
    bundle_basename=$(basename "$versioned_bundle")
    api_version=$(echo "$bundle_basename" | sed 's/node_modules-for-v\(.*\)\.tar\.xz/\1/')
  fi
fi

# Determine which vendor archive to use
if [ -n "$api_version" ] && [ -f "${flash}/node_modules-for-v${api_version}.tar.xz" ]; then
  vendor_archive="${flash}/node_modules-for-v${api_version}.tar.xz"
  echo "Using version-specific dependencies archive: $vendor_archive"
elif [ -f "${flash}/packed-node-modules.tar.xz" ]; then
  vendor_archive="${flash}/packed-node-modules.tar.xz"
  echo "Using generic dependencies archive: $vendor_archive"
else
  # No vendor archive found
  vendor_archive=""
  echo "No dependencies archive found"
fi

# Placeholder functions for plugin installation/uninstallation
install() {
  true
}
uninstall() {
  true
}

# Service control functions
start() {
  echo "Starting Unraid API service..."
  
  # Check if node modules need restoration
  if [ ! -d "${dependencies_dir}" ] && [ -f "${vendor_archive}" ]; then
    echo "Restoring node modules from vendor archive..."
    restore_dependencies "${vendor_archive}"
  fi
  
  # Create log directory if it doesn't exist
  mkdir -p /var/log/unraid-api
  
  # Copy env file if needed
  if [ -f "${api_base_dir}/.env.production" ] && [ ! -f "${api_base_dir}/.env" ]; then
    cp "${api_base_dir}/.env.production" "${api_base_dir}/.env"
  fi
  
  # Start the flash backup service if available
  if [ -x "/etc/rc.d/rc.flash_backup" ]; then
    echo "Starting flash backup service..."
    /etc/rc.d/rc.flash_backup start
  fi
  
  # Start the API service
  if [ -x "${unraid_binary_path}" ]; then
    "${unraid_binary_path}" start
    return $?
  else
    echo "Error: Unraid API binary not found or not executable at ${unraid_binary_path}"
    return 1
  fi
}

stop() {
  echo "Stopping Unraid API service..."
  if [ -x "${unraid_binary_path}" ]; then
    "${unraid_binary_path}" stop
    return $?
  else
    echo "Error: Unraid API binary not found or not executable at ${unraid_binary_path}"
    return 1
  fi
}

restart() {
  stop
  sleep 2
  start
}

status() {
  if [ -x "${unraid_binary_path}" ]; then
    "${unraid_binary_path}" status
    return $?
  else
    echo "Error: Unraid API binary not found or not executable at ${unraid_binary_path}"
    return 1
  fi
}

# Restores the node_modules directory from a backup file
# Args:
#   $1 - Path to the backup file (tar.xz format)
# Returns:
#   0 on success, 1 on failure
# Note: Requires 1.5x the backup size in free space for safe extraction
restore_dependencies() {
  local backup_file="$1"
  # Check if backup file exists
  if [ ! -f "$backup_file" ]; then
    echo "Backup file not found at '$backup_file'. Skipping restore."
    return 0
  fi

  # Check available disk space in destination
  local backup_size
  backup_size=$(stat -c%s "$backup_file")
  local dest_space
  dest_space=$(df --output=avail "$(dirname "$dependencies_dir")" | tail -n1)
  dest_space=$((dest_space * 1024)) # Convert KB to bytes

  # Require 1.5x the backup size for safe extraction
  local required_space=$((backup_size + (backup_size / 2)))

  if [ "$dest_space" -lt "$required_space" ]; then
    echo "Error: Insufficient disk space in destination. Need at least $((required_space / 1024 / 1024))MB, have $((dest_space / 1024 / 1024))MB"
    return 1
  fi

  echo "Restoring node_modules from '$backup_file' to '$dependencies_dir'"
  # Remove existing store directory if it exists and ensure its parent directory exists
  rm -rf "$dependencies_dir"
  mkdir -p "$(dirname "$dependencies_dir")"

  # Extract directly to final location
  if ! tar -xJf "$backup_file" -C "$(dirname "$dependencies_dir")" --preserve-permissions; then
    echo "Error: Failed to extract backup to final location."
    rm -rf "$dependencies_dir"
    return 1
  fi

  # Set ownership to root (0:0)
  chown -R 0:0 "$dependencies_dir"

  echo "node_modules restored successfully."
}

# Archives the node_modules directory to a specified location
# Args: none
# Returns:
#   0 on success, 1 on failure
archive_dependencies() {
  local source_dir="/usr/local/unraid-api/node_modules"
  local dest_dir="/boot/config/plugins/dynamix.my.servers"
  local archive_file="${dest_dir}/node_modules.tar.xz"

  # Check if source directory exists
  if [ ! -d "$source_dir" ]; then
    echo "Error: Source node_modules directory '$source_dir' does not exist."
    return 1
  fi

  # Create destination directory if it doesn't exist
  mkdir -p "$dest_dir"

  echo "Archiving node_modules from '$source_dir' to '$archive_file'"

  # Create archive with XZ compression level 5, preserving symlinks
  if XZ_OPT=-5 tar -cJf "$archive_file" -C "$(dirname "$source_dir")" "$(basename "$source_dir")"; then
    echo "node_modules archive created successfully."
  else
    echo "Error: Failed to create node_modules archive."
    return 1
  fi
}

case "$1" in
'start')
  start
  ;;
'stop')
  stop
  ;;
'restart'|'reload')
  restart
  ;;
'status')
  status
  ;;
'install')
  install "$2"
  ;;
'uninstall')
  uninstall
  ;;
'restore-dependencies')
  restore_dependencies "$2"
  ;;
'archive-dependencies')
  archive_dependencies
  ;;
*)
  # Pass all other commands to unraid-api
  "${unraid_binary_path}" "$@"
  ;;
esac
