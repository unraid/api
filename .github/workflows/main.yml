name: CI - Main (API)

on:
  push:
    branches: [ 'main' ]
    tags: [ 'v*' ]
  # Don't run main when plugin is edited
    paths-ignore:
      - plugin
      - '**.md'
      - '**.yml'
defaults:
  run:
    working-directory: api
jobs:
  start:
    # This prevents a tag running twice as it'll have a "tag" and a "commit" event
    # We only want the tag to run the action as it'll be able to create the release notes
    if: (startsWith(github.event.ref, 'refs/heads/') && !startsWith(github.event.head_commit.message, 'chore(release)')) || (startsWith(github.event.ref, 'refs/tags/') && startsWith(github.event.head_commit.message, 'chore(release)'))
    runs-on: ubuntu-latest
    steps:
      - name: PWD
        run: pwd
      - name: Validate branch and tag
        run: exit 0

  lint:
    runs-on: ubuntu-latest
    needs: [start]
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Reconfigure git to use HTTP authentication
      run: >
        git config --global url."https://github.com/".insteadOf
        ssh://git@github.com/

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version-file: 'api/.nvmrc'

    # - name: Get npm cache directory
    #   id: npm-cache
    #   run: echo "::set-output name=dir::$(npm config get cache)"

    # - name: Load npm cache
    #   uses: actions/cache@v3
    #   with:
    #     path: ${{ steps.npm-cache.outputs.dir }}
    #     key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}

    - name: Install libvirt-dev
      run: sudo apt-get update && sudo apt-get install libvirt-dev

    - name: Installing node deps
      run: npm install

    - name: Lint files
      run: npm run lint

  test:
    runs-on: ubuntu-latest

    needs: [start]

    steps:
    - name: CD to api
      run: cd api
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Reconfigure git to use HTTP authentication
      run: >
        git config --global url."https://github.com/".insteadOf
        ssh://git@github.com/

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version-file: 'api/.nvmrc'

    # - name: Get npm cache directory
    #   id: npm-cache
    #   run: echo "::set-output name=dir::$(npm config get cache)"

    # - name: Load npm cache
    #   uses: actions/cache@v3
    #   with:
    #     path: ${{ steps.npm-cache.outputs.dir }}
    #     key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}

    - name: Install libvirt-dev
      run: sudo apt-get update && sudo apt-get install libvirt-dev

    - name: Installing node deps
      run: npm install

    - name: Run unit tests with code coverage
      run: npm run coverage

  build:
    runs-on: ubuntu-latest

    needs: [lint, test]

    steps:
    - name: CD to api
      run: cd api
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Add SSH deploy key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.UNRAID_BOT_SSH_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version-file: 'api/.nvmrc'

    - name: Install libvirt-dev
      run: sudo apt-get update && sudo apt-get install libvirt-dev

    - name: Installing node deps
      run: npm install

    # See https://github.com/apollographql/subscriptions-transport-ws/issues/433
    - name: Patch subscriptions-transport-ws
      run: npm run patch:subscriptions-transport-ws

    - name: Install pkg and node-prune
      run: npm i -g pkg && curl -sf https://gobinaries.com/tj/node-prune | sh

    - name: Build and pack binary
      run: WORKDIR=${{ github.workspace }} && npm run build-pkg

    - name: Upload tgz to Github artifacts
      uses: actions/upload-artifact@v3
      with:
        name: unraid-api
        path: ${{ github.workspace }}/deploy/release/*.tgz

  pre-release:
    # Only release if this is a alpha|beta|rc tag
    if: |
      startsWith(github.ref, 'refs/tags/v') &&
        (contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc'))
    runs-on: ubuntu-latest

    needs: [build]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Add SSH deploy key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.UNRAID_BOT_SSH_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    - name: Download unraid-api binary tgz
      uses: actions/download-artifact@v3
      with:
        name: unraid-api

    - name: Create release notes
      run: |
        # Get the last release tag
        LAST_RELEASE=$(git tag --list  --sort=v:refname | tail -1); \
        # Get all the commit messages between now and the last tag
        RELEASE_NOTES=$(git log "$LAST_RELEASE...HEAD" --pretty=format:"- %s [\`%h\`](http://github.com/$GITHUB_REPOSITORY/commit/%H)" --reverse) \
        # Save release notes to a file
        echo "$RELEASE_NOTES" > ${{ github.workspace }}/RELEASE_NOTES.md && \
        # Log release notes
        cat ${{ github.workspace }}/RELEASE_NOTES.md

    - name: Create Github release
      uses: softprops/action-gh-release@v1
      with:
        body_path: ${{ github.workspace }}/RELEASE_NOTES.md
        draft: false
        prerelease: true
        files: unraid-api-*.tgz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    # Only release if this is a version tag
    if: |
      startsWith(github.ref, 'refs/tags/v') &&
        (!contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc'))
    runs-on: ubuntu-latest

    needs: [build]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Add SSH deploy key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.UNRAID_BOT_SSH_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    - name: Download unraid-api binary tgz
      uses: actions/download-artifact@v3
      with:
        name: unraid-api

    - name: Create release notes
      run: |
        # Get the last release tag
        # We get the second to last tag as the last is the current one
        LAST_RELEASE=$(git tag --list  --sort=v:refname | grep -v 'alpha\|beta\|rc' | tail -2 | head -1); \
        # Get all the commit messages between now and the last non-pre-release tag
        RELEASE_NOTES=$(git log "$LAST_RELEASE...HEAD" --pretty=format:"- %s [\`%h\`](http://github.com/$GITHUB_REPOSITORY/commit/%H)" --reverse | sed \$d) \
        # Save release notes to a file
        echo "$RELEASE_NOTES" > ${{ github.workspace }}/RELEASE_NOTES.md && \
        # Log release notes
        cat ${{ github.workspace }}/RELEASE_NOTES.md

    - name: Create Github release
      uses: softprops/action-gh-release@v1
      with:
        body_path: ${{ github.workspace }}/RELEASE_NOTES.md
        draft: false
        prerelease: false
        files: unraid-api-*.tgz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
