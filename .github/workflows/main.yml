name: CI - Main (API)

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  release-please:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - id: release
        uses: googleapis/release-please-action@v4
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
  start:
    # This prevents a tag running twice as it'll have a "tag" and a "commit" event
    # We only want the tag to run the action as it'll be able to create the release notes
    if: (startsWith(github.event.ref, 'refs/heads/') && !startsWith(github.event.head_commit.message, 'chore(release)')) || (startsWith(github.event.ref, 'refs/tags/') && startsWith(github.event.head_commit.message, 'chore(release)'))
    runs-on: ubuntu-latest
    steps:
      - name: Validate branch and tag
        run: exit 0

  build-test-api:
    name: Build and Test API
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: |
            api/package-lock.json
          node-version-file: "api/.nvmrc"

      - name: Install Build Packages using Apt
        run: |
          sudo apt-get update -y && sudo apt-get install -y \
          bash \
          procps \ 
          python3 \
          libvirt-dev \
          jq \
          zstd \
          git \
          build-essential
      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run coverage

      - name: Build
        run: npm run build

      - name: Get Git Short Sha and API version
        id: vars
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          IS_TAGGED=$(git describe --tags --abbrev=0 --exact-match || echo '')
          PACKAGE_LOCK_VERSION=$(jq -r '.version' package-lock.json)
          API_VERSION=$([[ -n "$IS_TAGGED" ]] && echo "$PACKAGE_LOCK_VERSION" || echo "${PACKAGE_LOCK_VERSION}+${GIT_SHA}")
          export API_VERSION
      - name: Build
        run: npm run build-and-pack

      - name: Upload tgz to Github artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unraid-api
          path: ${{ github.workspace }}/api/deploy/release/*.tgz

  build-unraid-ui-webcomponents:
    name: Build Unraid UI Library (Webcomponent Version)
    defaults:
      run:
        working-directory: unraid-ui
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install node
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: |
            unraid-ui/package-lock.json
          node-version-file: ".nvmrc"

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build:wc

      - name: Upload Artifact to Github
        uses: actions/upload-artifact@v4
        with:
          name: unraid-wc-ui
          path: unraid-ui/dist/

  build-web:
    # needs: [build-unraid-ui]
    name: Build Web App
    environment:
      name: production
    defaults:
      run:
        working-directory: web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create env file
        run: |
          touch .env
          echo VITE_ACCOUNT=${{ vars.VITE_ACCOUNT }} >> .env
          echo VITE_CONNECT=${{ vars.VITE_CONNECT }} >> .env
          echo VITE_UNRAID_NET=${{ vars.VITE_UNRAID_NET }} >> .env
          echo VITE_CALLBACK_KEY=${{ vars.VITE_CALLBACK_KEY }} >> .env
          cat .env

      - name: Install node
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: |
            web/package-lock.json
          node-version-file: "web/.nvmrc"

      - name: Setup Just
        uses: extractions/setup-just@v2

      - name: Build Unraid UI
        run: just ../unraid-ui/setup

      - name: Installing node deps
        run: npm install

      - name: Lint files
        continue-on-error: true
        run: npm run lint

      - name: Test
        run: npm run test:ci

      - name: Build
        run: npm run build

      - name: Upload build to Github artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unraid-wc-rich
          path: web/.nuxt/nuxt-custom-elements/dist/unraid-components

  build-plugin:
    needs: [build-test-api, build-web, build-unraid-ui-webcomponents]
    defaults:
      run:
        working-directory: plugin
    runs-on: ubuntu-latest
    steps:
      - name: Set Timezone
        uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "America/Los_Angeles"
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install node
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: |
            plugin/package-lock.json
          node-version-file: ".nvmrc"
      - name: Install dependencies
        run: npm ci
      - name: Download Unraid Web Components
        uses: actions/download-artifact@v4
        with:
          pattern: unraid-wc-*
          path: ./plugin/source/dynamix.unraid.net/usr/local/emhttp/plugins/dynamix.my.servers/unraid-components
          merge-multiple: true
      - name: Download Unraid API
        uses: actions/download-artifact@v4
        with:
          name: unraid-api
          path: ./plugin/source/dynamix.unraid.net/usr/local/unraid-api
      - name: Build Plugin
        run: |
          cd ${{ github.workspace }}/plugin
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            echo "TAG=PR${{ github.event.pull_request.number }}" >> .env
          fi
          npm run build:validate
      - name: Upload binary txz and plg to Github artifacts
        uses: actions/upload-artifact@v4
        with:
          name: connect-files
          path: |
            plugin/deploy/release/plugins/
            plugin/deploy/release/archive/*.txz
          retention-days: 5
          if-no-files-found: error

  release-pull-request:
    if: |
      github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build-plugin]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Make PR Release Folder
        run: mkdir pr-release/

      - name: Download plugin binary tgz
        uses: actions/download-artifact@v4
        with:
          name: connect-files

      - name: Copy other release files to pr-release
        run: |
          cp archive/*.txz pr-release/
          cp plugins/pr/dynamix.unraid.net.plg pr-release/dynamix.unraid.net.plg

      - name: Upload to Cloudflare
        uses: jakejarvis/s3-sync-action@v0.5.1
        env:
          AWS_S3_ENDPOINT: ${{ secrets.CF_ENDPOINT }}
          AWS_S3_BUCKET: ${{ secrets.CF_BUCKET_PREVIEW }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CF_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_SECRET_ACCESS_KEY }}
          AWS_REGION: "auto"
          SOURCE_DIR: pr-release
          DEST_DIR: unraid-api/pr/${{ github.event.pull_request.number }}
      - name: Comment URL
        uses: thollander/actions-comment-pull-request@v3
        with:
          comment-tag: prlink
          mode: recreate
          message: |
            This plugin has been deployed to Cloudflare R2 and is available for testing.
            Download it at this URL:
            ```
            https://preview.dl.unraid.net/unraid-api/pr/${{ github.event.pull_request.number }}/dynamix.unraid.net.plg
            ```

  release-staging:
    environment:
      name: staging
    # Only release if this is a push to the main branch
    if: startsWith(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    needs: [build-plugin]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Make Staging Release Folder
        run: mkdir staging-release/

      - name: Download plugin binary tgz
        uses: actions/download-artifact@v4
        with:
          name: connect-files

      - name: Copy Files for Staging Release
        run: |
          cp archive/*.txz staging-release/
          cp plugins/staging/dynamix.unraid.net.plg staging-release/dynamix.unraid.net.plg
          ls -al staging-release

      - name: Upload Staging Plugin to Cloudflare Bucket
        uses: jakejarvis/s3-sync-action@v0.5.1
        env:
          AWS_S3_ENDPOINT: ${{ secrets.CF_ENDPOINT }}
          AWS_S3_BUCKET: ${{ secrets.CF_BUCKET_PREVIEW }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CF_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_SECRET_ACCESS_KEY }}
          AWS_REGION: "auto"
          SOURCE_DIR: staging-release
          DEST_DIR: unraid-api

  create-draft-release:
    # Only create new draft if this is a version tag
    if: |
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build-plugin]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download plugin binary tgz
        uses: actions/download-artifact@v4
        with:
          name: connect-files

      - name: Move Files to Release Folder
        run: |
          mkdir -p release/
          mv unraid-api-*.tgz release/
          mv plugins/production/dynamix.unraid.net.plg release/
          mv archive/* release/

      - name: Create Github release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: false
          files: |
            release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
