name: CI - Main (API)

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  release-please:
    # Only run release-please on pushes to main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - id: release
        uses: googleapis/release-please-action@v4
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
  test-api:
    defaults:
      run:
        working-directory: api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Cache APT Packages
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: bash procps python3 libvirt-dev jq zstd git build-essential
          version: 1.0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: PNPM Install
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Test
        run: pnpm run coverage

  build-api:
    name: Build and Test API
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache APT Packages
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: bash procps python3 libvirt-dev jq zstd git build-essential
          version: 1.0

      - name: PNPM Install
        run: |
          cd ${{ github.workspace }}
          pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Type Check
        run: pnpm run type-check
        continue-on-error: true

      - name: Build
        run: pnpm run build

      - name: Get Git Short Sha and API version
        id: vars
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          IS_TAGGED=$(git describe --tags --abbrev=0 --exact-match || echo '')
          PACKAGE_LOCK_VERSION=$(jq -r '.version' package.json)
          API_VERSION=$([[ -n "$IS_TAGGED" ]] && echo "$PACKAGE_LOCK_VERSION" || echo "${PACKAGE_LOCK_VERSION}+${GIT_SHA}")
          export API_VERSION

      - name: Build
        run: pnpm run build-and-pack

      - name: Upload tgz to Github artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unraid-api
          path: ${{ github.workspace }}/api/deploy/release/*.tgz

  build-unraid-ui-webcomponents:
    name: Build Unraid UI Library (Webcomponent Version)
    defaults:
      run:
        working-directory: unraid-ui
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache APT Packages
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: bash procps python3 libvirt-dev jq zstd git build-essential
          version: 1.0

      - name: Install dependencies
        run: |
          cd ${{ github.workspace }}
          pnpm install --frozen-lockfile --filter @unraid/ui

      - name: Build
        run: pnpm run build:wc

      - name: Upload Artifact to Github
        uses: actions/upload-artifact@v4
        with:
          name: unraid-wc-ui
          path: unraid-ui/dist/

  build-web:
    # needs: [build-unraid-ui]
    name: Build Web App
    environment:
      name: production
    defaults:
      run:
        working-directory: web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create env file
        run: |
          touch .env
          echo VITE_ACCOUNT=${{ vars.VITE_ACCOUNT }} >> .env
          echo VITE_CONNECT=${{ vars.VITE_CONNECT }} >> .env
          echo VITE_UNRAID_NET=${{ vars.VITE_UNRAID_NET }} >> .env
          echo VITE_CALLBACK_KEY=${{ vars.VITE_CALLBACK_KEY }} >> .env
          cat .env

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: PNPM Install
        run: |
          cd ${{ github.workspace }}
          pnpm install --frozen-lockfile --filter @unraid/web --filter @unraid/ui

      - name: Build Unraid UI
        run: |
          cd ${{ github.workspace }}/unraid-ui
          pnpm run build

      - name: Lint files
        run: pnpm run lint

      - name: Type Check
        run: pnpm run type-check

      - name: Test
        run: pnpm run test:ci

      - name: Build
        run: pnpm run build

      - name: Upload build to Github artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unraid-wc-rich
          path: web/.nuxt/nuxt-custom-elements/dist/unraid-components

  build-plugin:
    needs: [build-api, build-web, build-unraid-ui-webcomponents]
    outputs:
      tag: ${{ steps.build-plugin.outputs.tag }}
    defaults:
      run:
        working-directory: plugin
    runs-on: ubuntu-latest
    steps:
      - name: Set Timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "America/Los_Angeles"
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd ${{ github.workspace }}
          pnpm install --frozen-lockfile --filter @unraid/connect-plugin

      - name: Download Unraid Web Components
        uses: actions/download-artifact@v4
        with:
          pattern: unraid-wc-*
          path: ./plugin/source/dynamix.unraid.net/usr/local/emhttp/plugins/dynamix.my.servers/unraid-components
          merge-multiple: true
      - name: Download Unraid API
        uses: actions/download-artifact@v4
        with:
          name: unraid-api
          path: /tmp/unraid-api/
      - name: Extract Unraid API and Build Plugin
        id: build-plugin
        run: |
          tar -xzf /tmp/unraid-api/unraid-api.tgz -C ${{ github.workspace }}/plugin/source/dynamix.unraid.net/usr/local/unraid-api
          cd ${{ github.workspace }}/plugin

          if [ -n "${{ github.event.pull_request.number }}" ]; then
            export TAG=PR${{ github.event.pull_request.number }}
            # Put tag into github env
            echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          fi

          pnpm run build
      - name: Upload binary txz and plg to Github artifacts
        uses: actions/upload-artifact@v4
        with:
          name: connect-files
          path: |
            plugin/deploy/release/plugins/
            plugin/deploy/release/archive/*.txz
          retention-days: 5
          if-no-files-found: error

  release-pull-request:
    if: |
      github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [test-api, build-plugin]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Make PR Release Folder
        run: mkdir pr-release/

      - name: Download plugin binary tgz
        uses: actions/download-artifact@v4
        with:
          name: connect-files

      - name: Copy other release files to pr-release
        run: |
          cp archive/*.txz pr-release/
          cp plugins/pr/dynamix.unraid.net.plg pr-release/dynamix.unraid.net.plg

      - name: Upload to Cloudflare
        uses: jakejarvis/s3-sync-action@v0.5.1
        env:
          AWS_S3_ENDPOINT: ${{ secrets.CF_ENDPOINT }}
          AWS_S3_BUCKET: ${{ secrets.CF_BUCKET_PREVIEW }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CF_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_SECRET_ACCESS_KEY }}
          AWS_REGION: "auto"
          SOURCE_DIR: pr-release
          DEST_DIR: unraid-api/tag/${{ needs.build-plugin.outputs.tag }}
      - name: Comment URL
        uses: thollander/actions-comment-pull-request@v3
        with:
          comment-tag: prlink
          mode: recreate
          message: |
            This plugin has been deployed to Cloudflare R2 and is available for testing.
            Download it at this URL:
            ```
            https://preview.dl.unraid.net/unraid-api/tag/${{ needs.build-plugin.outputs.tag }}/dynamix.unraid.net.plg
            ```

  release-staging:
    environment:
      name: staging
    # Only release if this is a push to the main branch
    if: startsWith(github.ref, 'refs/heads/main')
    runs-on: ubuntu-latest
    needs: [test-api, build-plugin]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Make Staging Release Folder
        run: mkdir staging-release/

      - name: Download plugin binary tgz
        uses: actions/download-artifact@v4
        with:
          name: connect-files

      - name: Copy Files for Staging Release
        run: |
          cp archive/*.txz staging-release/
          cp plugins/staging/dynamix.unraid.net.plg staging-release/dynamix.unraid.net.plg
          ls -al staging-release

      - name: Upload Staging Plugin to Cloudflare Bucket
        uses: jakejarvis/s3-sync-action@v0.5.1
        env:
          AWS_S3_ENDPOINT: ${{ secrets.CF_ENDPOINT }}
          AWS_S3_BUCKET: ${{ secrets.CF_BUCKET_PREVIEW }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CF_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_SECRET_ACCESS_KEY }}
          AWS_REGION: "auto"
          SOURCE_DIR: staging-release
          DEST_DIR: unraid-api

  create-draft-release:
    # Only run if release-please created a release
    if: needs.release-please.outputs.releases_created == 'true'
    runs-on: ubuntu-latest
    needs: [release-please, test-api, build-plugin]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download plugin binary tgz
        uses: actions/download-artifact@v4
        with:
          name: connect-files

      - name: Move Files to Release Folder
        run: |
          mkdir -p release/
          mv plugins/production/dynamix.unraid.net.plg release/
          mv archive/*.txz release/

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_name=$(gh release list --repo ${{ github.repository }} --json name,isDraft --jq '.[] | select(.isDraft == true) | .name' | head -n 1)
          # For each file in release directory
          for file in release/*; do
            echo "Uploading $file to release..."
            gh release upload "${release_name}" "$file" --clobber
          done
