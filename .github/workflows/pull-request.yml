name: Pull Request

on:
  pull_request:
    branches:
      - main

    # Don't run tests when markdown or yml files are edited
    paths-ignore:
      - '**.md'
      - '**.yml'

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Reconfigure git to use HTTP authentication
      run: >
        git config --global url."https://github.com/".insteadOf
        ssh://git@github.com/

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version-file: '.nvmrc'

    - name: Get npm cache directory
      id: npm-cache
      run: echo "::set-output name=dir::$(npm config get cache)"

    - name: Load npm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}

    - name: Install libvirt-dev
      run: sudo apt-get update && sudo apt-get install libvirt-dev

    - name: Installing node deps
      run: npm install

    - name: Lint files
      run: npm run lint

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Reconfigure git to use HTTP authentication
      run: >
        git config --global url."https://github.com/".insteadOf
        ssh://git@github.com/

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version-file: '.nvmrc'

    - name: Get npm cache directory
      id: npm-cache
      run: echo "::set-output name=dir::$(npm config get cache)"

    - name: Load npm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}

    - name: Install libvirt-dev
      run: sudo apt-get update && sudo apt-get install libvirt-dev

    - name: Installing node deps
      run: npm install

    - name: Run unit tests with code coverage
      run: npm run coverage

  build:
    runs-on: ubuntu-latest

    needs: [lint, test]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Add SSH deploy key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.UNRAID_BOT_SSH_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version-file: '.nvmrc'

    - name: Load npm cache
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install libvirt-dev
      run: sudo apt-get update && sudo apt-get install libvirt-dev

    - name: Installing node deps
      run: npm install

    # See https://github.com/apollographql/subscriptions-transport-ws/issues/433
    - name: Patch subscriptions-transport-ws
      run: npm run patch:subscriptions-transport-ws

    - name: Install pkg
      run: npm i -g pkg

    - name: Build and pack binary
      run: npm run build

    - name: Upload tgz to Github artifacts
      uses: actions/upload-artifact@v3
      with:
        name: unraid-api
        path: /app/deploy/release/*.tgz
