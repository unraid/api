interface UserAccount {
    id: ID!
    name: String!
    description: String!
    role: String!
}

input usersInput {
    slim: Boolean
}

type Query {
    """User account"""
    user(id: ID!): User @func(module: "getUser")
    """User accounts"""
    users(input: usersInput): [User!]! @func(module: "getUsers", query: { slim: false })
}

input addUserInput {
    name: String!
    password: String!
    description: String
}

input deleteUserInput {
    name: String!
}

type Mutation {
    """Add a new user"""
    addUser(input: addUserInput!): User @func(module: "addUser")
    """Delete a user"""
    deleteUser(input: deleteUserInput!): User @func(module: "deleteUser")
}

type Subscription {
    user(id: ID!): User!
    users: [User]!
}

"""A local user account"""
type User implements UserAccount {
    id: ID!
    """A unique name for the user"""
    name: String!
    description: String!
    role: String!
    """If the account has a password set"""
    password: Boolean
}