type Query {
    """Virtual machine"""
    vm(name: String!): VmDomain! @func(module: "getDomain")
    """Virtual machines"""
    vms: Vms
}

type Vms {
    domains: [VmDomain!] @func(module: "getDomains")
}

type VmDomainSubscription {
    mutation: MutationType!
    node: [VmDomain!]
}

type Subscription {
    vms: VmDomainSubscription!
}

enum VmState {
    """Machine is stopped"""
    shut_off
    """Machine is running"""
    running
}

"""A virtual machine"""
type VmDomain {
    uuid: ID!
    """Operating system type"""
    osType: String
    """If the vm should auto-start when the server boots"""
    autostart: Boolean
    """Max memory in bytes"""
    maxMemory: Int
    schedulerType: String
    schedulerParameters: SchedulerParameters
    securityLabel: SecurityLabel
    """A friendly name for the vm"""
    name: String
    state: VmState
    memory: Int
    vcpus: Int
    cpuTime: Int
}

type SchedulerParameters {
    cpu_shares: Int
    vcpu_period: Int
    vcpu_quota: Int
    emulator_period: Int
    emulator_quota: Int
    global_period: Int
    global_quota: Int
    iothread_period: Int
    iothread_quota: Int
}

type SecurityLabel {
    label: String
    enforcing: Boolean
}